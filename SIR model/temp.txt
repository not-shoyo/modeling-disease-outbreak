{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "41Bk2rTYflKV"
      },
      "source": [
        "# IEEE Project - Modeling Disease Outbreak\n",
        "Simulating the spread of a disease between children and teachers in a primary school using the SIR model."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ao99YOS1f8Fj"
      },
      "source": [
        "## Importing Libraries"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "id": "rVUrWyYqf7qP"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "pd.options.mode.chained_assignment = None\n",
        "from google.colab import files\n",
        "import missingno as msno\n",
        "import random\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eCzKAf2IgAJL"
      },
      "source": [
        "## Getting the Dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 166,
          "resources": {
            "http://localhost:8080/nbextensions/google.colab/files.js": {
              "data": "Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgZG8gewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwoKICAgICAgbGV0IHBlcmNlbnREb25lID0gZmlsZURhdGEuYnl0ZUxlbmd0aCA9PT0gMCA/CiAgICAgICAgICAxMDAgOgogICAgICAgICAgTWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCk7CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPSBgJHtwZXJjZW50RG9uZX0lIGRvbmVgOwoKICAgIH0gd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCk7CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK",
              "headers": [
                [
                  "content-type",
                  "application/javascript"
                ]
              ],
              "ok": true,
              "status": 200,
              "status_text": ""
            }
          }
        },
        "id": "OB8bXwUkg0fS",
        "outputId": "8f86a9ce-6790-46d6-da51-cc04e242b9f0"
      },
      "outputs": [],
      "source": [
        "files.upload()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "1LgoSCiy28K4"
      },
      "outputs": [],
      "source": [
        "metadata = pd.read_csv('metadata_primaryschool.csv', sep='\\t', lineterminator='\\n', names=['ID', 'Class', 'Sex'])\n",
        "contact_network = pd.read_csv('primaryschool.csv', sep='\\t', lineterminator='\\n', names=['Time', 'ID 1', 'ID 2', 'Class 1', 'Class 2']).sort_values(by=['Time'])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ixHI3OO823GP"
      },
      "source": [
        "### Metadata"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "pVkBJwdb4F3u",
        "outputId": "b85b8621-272c-45dd-866f-1c47e44b78dd"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ID</th>\n",
              "      <th>Class</th>\n",
              "      <th>Sex</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1426</td>\n",
              "      <td>5B</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1427</td>\n",
              "      <td>5B</td>\n",
              "      <td>F</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1428</td>\n",
              "      <td>5B</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1429</td>\n",
              "      <td>5B</td>\n",
              "      <td>F</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1430</td>\n",
              "      <td>5B</td>\n",
              "      <td>M</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "     ID Class Sex\n",
              "0  1426    5B   M\n",
              "1  1427    5B   F\n",
              "2  1428    5B   M\n",
              "3  1429    5B   F\n",
              "4  1430    5B   M"
            ]
          },
          "execution_count": 4,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "metadata.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bMaZ8wbRA3B9",
        "outputId": "94ec88b5-b3e0-43ec-b394-2639bbc32cc0"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "There are 242 people in the model\n"
          ]
        }
      ],
      "source": [
        "N = metadata.shape[0]\n",
        "print(f\"There are {N} people in the model\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "k7vM3s5ihU3F"
      },
      "source": [
        "### Contact Network"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "qdvsaGg8fbNZ",
        "outputId": "9ba4e05c-b0a3-44f1-ad6b-054fee1833f7"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Time</th>\n",
              "      <th>ID 1</th>\n",
              "      <th>ID 2</th>\n",
              "      <th>Class 1</th>\n",
              "      <th>Class 2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>31220</td>\n",
              "      <td>1558</td>\n",
              "      <td>1567</td>\n",
              "      <td>3B</td>\n",
              "      <td>3B</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>31220</td>\n",
              "      <td>1560</td>\n",
              "      <td>1570</td>\n",
              "      <td>3B</td>\n",
              "      <td>3B</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>31220</td>\n",
              "      <td>1567</td>\n",
              "      <td>1574</td>\n",
              "      <td>3B</td>\n",
              "      <td>3B</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>31220</td>\n",
              "      <td>1632</td>\n",
              "      <td>1818</td>\n",
              "      <td>4B</td>\n",
              "      <td>4B</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>31220</td>\n",
              "      <td>1632</td>\n",
              "      <td>1866</td>\n",
              "      <td>4B</td>\n",
              "      <td>4B</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "    Time  ID 1  ID 2 Class 1 Class 2\n",
              "0  31220  1558  1567      3B      3B\n",
              "1  31220  1560  1570      3B      3B\n",
              "2  31220  1567  1574      3B      3B\n",
              "3  31220  1632  1818      4B      4B\n",
              "4  31220  1632  1866      4B      4B"
            ]
          },
          "execution_count": 6,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "contact_network.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NwsaQR2Xius8",
        "outputId": "76d502ae-4b79-429e-ee11-bbe4fbdbf258"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Time       3100\n",
              "ID 1        239\n",
              "ID 2        241\n",
              "Class 1      11\n",
              "Class 2      11\n",
              "dtype: int64"
            ]
          },
          "execution_count": 7,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "contact_network.nunique()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "dOYk0Q7Li7Rk",
        "outputId": "680e9037-9a90-4afc-c350-dbe98d735d18"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Time</th>\n",
              "      <th>ID 1</th>\n",
              "      <th>ID 2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>125773.000000</td>\n",
              "      <td>125773.000000</td>\n",
              "      <td>125773.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>90687.675574</td>\n",
              "      <td>1635.858109</td>\n",
              "      <td>1737.303897</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>43793.491033</td>\n",
              "      <td>122.818086</td>\n",
              "      <td>137.779067</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>31220.000000</td>\n",
              "      <td>1426.000000</td>\n",
              "      <td>1427.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>45640.000000</td>\n",
              "      <td>1545.000000</td>\n",
              "      <td>1653.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>118580.000000</td>\n",
              "      <td>1661.000000</td>\n",
              "      <td>1759.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>132020.000000</td>\n",
              "      <td>1719.000000</td>\n",
              "      <td>1857.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>148120.000000</td>\n",
              "      <td>1920.000000</td>\n",
              "      <td>1922.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                Time           ID 1           ID 2\n",
              "count  125773.000000  125773.000000  125773.000000\n",
              "mean    90687.675574    1635.858109    1737.303897\n",
              "std     43793.491033     122.818086     137.779067\n",
              "min     31220.000000    1426.000000    1427.000000\n",
              "25%     45640.000000    1545.000000    1653.000000\n",
              "50%    118580.000000    1661.000000    1759.000000\n",
              "75%    132020.000000    1719.000000    1857.000000\n",
              "max    148120.000000    1920.000000    1922.000000"
            ]
          },
          "execution_count": 8,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "contact_network.describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 390
        },
        "id": "hY0WS2YxjZiy",
        "outputId": "935b8e64-070d-4c87-9d90-8e7f132d68ff"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fc59e3d39d0>"
            ]
          },
          "execution_count": 9,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 720x360 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "msno.matrix(contact_network, width_ratios=(3, 3), figsize=(10, 5))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Tp8USvocib5E"
      },
      "source": [
        "We can see that the data is complete. We're gonna use this temporal network of contacts to simulate our SIR model. Each of these contacts is active from t - 20 to t seconds. But since we need to trace the spread over a month, we'll assume the timestep to be 10 minutes long instead of 20 seconds. Using the metadata that we have, we may be able to come up with some interesting statistics as well."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "HjSJ3F6-9IrT",
        "outputId": "eb06dd4a-fc4a-4305-df34-7c130b9793da"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Time</th>\n",
              "      <th>ID 1</th>\n",
              "      <th>ID 2</th>\n",
              "      <th>Class 1</th>\n",
              "      <th>Class 2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>1558</td>\n",
              "      <td>1567</td>\n",
              "      <td>3B</td>\n",
              "      <td>3B</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1560</td>\n",
              "      <td>1570</td>\n",
              "      <td>3B</td>\n",
              "      <td>3B</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>1567</td>\n",
              "      <td>1574</td>\n",
              "      <td>3B</td>\n",
              "      <td>3B</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>1632</td>\n",
              "      <td>1818</td>\n",
              "      <td>4B</td>\n",
              "      <td>4B</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>1632</td>\n",
              "      <td>1866</td>\n",
              "      <td>4B</td>\n",
              "      <td>4B</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Time  ID 1  ID 2 Class 1 Class 2\n",
              "0     1  1558  1567      3B      3B\n",
              "1     1  1560  1570      3B      3B\n",
              "2     1  1567  1574      3B      3B\n",
              "3     1  1632  1818      4B      4B\n",
              "4     1  1632  1866      4B      4B"
            ]
          },
          "execution_count": 10,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# adjusting the time column\n",
        "contact_network['Time'] = contact_network['Time'] - 31220\n",
        "contact_network['Time'] = contact_network['Time'] // 20\n",
        "contact_network['Time'] = contact_network['Time'] + 1\n",
        "\n",
        "contact_network.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "kpbrHHJv-Ji8",
        "outputId": "f49edcd2-f3d3-42ee-f659-1cbead1d77c8"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Time</th>\n",
              "      <th>ID 1</th>\n",
              "      <th>ID 2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>125773.000000</td>\n",
              "      <td>125773.000000</td>\n",
              "      <td>125773.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>2974.383779</td>\n",
              "      <td>1635.858109</td>\n",
              "      <td>1737.303897</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>2189.674552</td>\n",
              "      <td>122.818086</td>\n",
              "      <td>137.779067</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>1426.000000</td>\n",
              "      <td>1427.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>722.000000</td>\n",
              "      <td>1545.000000</td>\n",
              "      <td>1653.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>4369.000000</td>\n",
              "      <td>1661.000000</td>\n",
              "      <td>1759.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>5041.000000</td>\n",
              "      <td>1719.000000</td>\n",
              "      <td>1857.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>5846.000000</td>\n",
              "      <td>1920.000000</td>\n",
              "      <td>1922.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                Time           ID 1           ID 2\n",
              "count  125773.000000  125773.000000  125773.000000\n",
              "mean     2974.383779    1635.858109    1737.303897\n",
              "std      2189.674552     122.818086     137.779067\n",
              "min         1.000000    1426.000000    1427.000000\n",
              "25%       722.000000    1545.000000    1653.000000\n",
              "50%      4369.000000    1661.000000    1759.000000\n",
              "75%      5041.000000    1719.000000    1857.000000\n",
              "max      5846.000000    1920.000000    1922.000000"
            ]
          },
          "execution_count": 11,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "contact_network.describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZtXMYMVd-bAF",
        "outputId": "a659824d-77c2-40fc-915f-384d65b0104e"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Time       3100\n",
              "ID 1        239\n",
              "ID 2        241\n",
              "Class 1      11\n",
              "Class 2      11\n",
              "dtype: int64"
            ]
          },
          "execution_count": 12,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "contact_network.nunique()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eUSAhFqE43SS"
      },
      "source": [
        "## Creating our SIR Model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "id": "X_0cC4A-49-1"
      },
      "outputs": [],
      "source": [
        "class SIRModel:\n",
        "  beta = -1\n",
        "  gamma = -1\n",
        "  initial_infected_population = -1\n",
        "\n",
        "  def __init__(self, contact_network, metadata):\n",
        "    self.cn = contact_network\n",
        "    self.meta = metadata\n",
        "    self.N = self.meta.shape[0]\n",
        "\n",
        "  def introduce_infection(self, frac):\n",
        "    self.meta['Status'] = 'S'\n",
        "    classes = []\n",
        "    for idx in self.meta.index:\n",
        "      if random.random() < frac:\n",
        "        name = self.meta['Status'][idx] = 'I'\n",
        "        classes.append(self.meta['Class'][idx])\n",
        "    # print(classes)\n",
        "\n",
        "  def is_infected(self, id):\n",
        "    idx = self.meta.loc[self.meta['ID'] == id].index[0]\n",
        "    if self.meta['Status'][idx] == 'I':\n",
        "      return True\n",
        "    else:\n",
        "      return False\n",
        "\n",
        "  def is_susceptible(self, id):\n",
        "    idx = self.meta.loc[self.meta['ID'] == id].index[0]\n",
        "    if self.meta['Status'][idx] == 'S':\n",
        "      return True\n",
        "    else:\n",
        "      return False\n",
        "\n",
        "  def status(self, id):\n",
        "    idx = self.meta.loc[self.meta['ID'] == id].index[0]\n",
        "    return self.meta['Status'][idx]\n",
        "\n",
        "  def infect(self, id):\n",
        "    idx = self.meta.loc[self.meta['ID'] == id].index[0]\n",
        "    self.meta['Status'][idx] = 'I'\n",
        "\n",
        "  def simulate_recovery(self):\n",
        "    recoveries = 0\n",
        "    for idx in self.meta.index:\n",
        "      if self.meta['Status'][idx] == 'I':\n",
        "        if random.random() < self.gamma:\n",
        "          self.meta['Status'][idx] = 'R'\n",
        "          recoveries = recoveries + 1\n",
        "    return recoveries\n",
        "\n",
        "  def get_infections(self):\n",
        "    return len(self.meta.loc[self.meta['Status'] == 'I'].index)\n",
        "\n",
        "  def simulate(self, initial_infected_population=0.08, beta=1/10, gamma=1/2160):\n",
        "    self.beta = beta\n",
        "    self.gamma = gamma\n",
        "    self.introduce_infection(initial_infected_population)\n",
        "    num_infected = self.get_infections()\n",
        "    Y = [num_infected]\n",
        "    X = [self.N - num_infected]\n",
        "    Z = [0]\n",
        "    time = [0]\n",
        "    idx = 0\n",
        "    size = self.cn.shape[0]\n",
        "    while idx < size:\n",
        "      t = time[-1] + 1\n",
        "      if t == 1 or (t * 10) % (60 * 24) == 0:\n",
        "        print(\"==================================================\")\n",
        "        print(f\"{t * 10 // 60 // 24} day(s) have passed\")\n",
        "        print(f\"X: {X[-1]}, Y: {Y[-1]}, Z: {Z[-1]}\")\n",
        "        print(\"==================================================\")\n",
        "      \n",
        "      new_infections = 0\n",
        "      contacts = 0\n",
        "\n",
        "      # for idx in self.meta.index:\n",
        "      #   id_1 = self.meta['ID'][idx]\n",
        "      #   id_2 = self.meta['ID'][random.randint(0, self.N - 1)]\n",
        "      #   if self.is_susceptible(id_1) and self.is_infected(id_2):\n",
        "      #     contacts = contacts + 1\n",
        "      #     if random.random() < self.beta:\n",
        "      #       new_infections = new_infections + 1\n",
        "      #       self.infect(id_1)\n",
        "      #   elif self.is_infected(id_1) and self.is_susceptible(id_2):\n",
        "      #     contacts = contacts + 1\n",
        "      #     if random.random() < self.beta:\n",
        "      #       new_infections = new_infections + 1\n",
        "      #       self.infect(id_2)\n",
        "      # print(f\"{idx}\", end=\"\")\n",
        "      \n",
        "      while idx < size and self.cn['Time'][idx] == t:\n",
        "        id_1 = self.cn['ID 1'][idx]\n",
        "        id_2 = self.cn['ID 2'][idx]\n",
        "        if self.is_susceptible(id_1) and self.is_infected(id_2):\n",
        "          contacts = contacts + 1\n",
        "          if random.random() < self.beta:\n",
        "            new_infections = new_infections + 1\n",
        "            self.infect(id_1)\n",
        "        elif self.is_infected(id_1) and self.is_susceptible(id_2):\n",
        "          contacts = contacts + 1\n",
        "          if random.random() < self.beta:\n",
        "            new_infections = new_infections + 1\n",
        "            self.infect(id_2)\n",
        "        idx = idx + 1\n",
        "      # print(f\"-{idx}\")\n",
        "      new_recoveries = self.simulate_recovery()\n",
        "\n",
        "      # if contacts:\n",
        "      #   print(f\"{contacts} contact(s)\")\n",
        "      # if new_infections:\n",
        "      #   print(f\"{new_infections} new infection(s)\")\n",
        "      # if new_recoveries:\n",
        "      #   print(f\"{new_recoveries} new recovery(s)\")\n",
        "      \n",
        "      Y.append(Y[-1] - new_recoveries + new_infections)\n",
        "      X.append(X[-1] - new_infections)\n",
        "      Z.append(Z[-1] + new_recoveries)\n",
        "      time.append(t)\n",
        "    \n",
        "    return X, Y, Z, time\n",
        "\n",
        "model = SIRModel(\n",
        "    contact_network=contact_network,\n",
        "    metadata=metadata\n",
        ")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UhiAs4IqL-68"
      },
      "source": [
        "## Running the Simulation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 37,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QM2nDf8gNlkA",
        "outputId": "50c1bb65-6115-4504-b88f-65b97fd9aa29"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "==================================================\n",
            "0 day(s) have passed\n",
            "X: 227, Y: 15, Z: 0\n",
            "==================================================\n",
            "==================================================\n",
            "1 day(s) have passed\n",
            "X: 227, Y: 15, Z: 0\n",
            "==================================================\n",
            "==================================================\n",
            "2 day(s) have passed\n",
            "X: 217, Y: 24, Z: 1\n",
            "==================================================\n",
            "==================================================\n",
            "3 day(s) have passed\n",
            "X: 192, Y: 46, Z: 4\n",
            "==================================================\n",
            "==================================================\n",
            "4 day(s) have passed\n",
            "X: 175, Y: 57, Z: 10\n",
            "==================================================\n",
            "==================================================\n",
            "5 day(s) have passed\n",
            "X: 155, Y: 71, Z: 16\n",
            "==================================================\n",
            "==================================================\n",
            "6 day(s) have passed\n",
            "X: 140, Y: 71, Z: 31\n",
            "==================================================\n",
            "==================================================\n",
            "7 day(s) have passed\n",
            "X: 129, Y: 74, Z: 39\n",
            "==================================================\n",
            "==================================================\n",
            "8 day(s) have passed\n",
            "X: 121, Y: 72, Z: 49\n",
            "==================================================\n",
            "==================================================\n",
            "9 day(s) have passed\n",
            "X: 110, Y: 78, Z: 54\n",
            "==================================================\n",
            "==================================================\n",
            "10 day(s) have passed\n",
            "X: 93, Y: 89, Z: 60\n",
            "==================================================\n",
            "==================================================\n",
            "11 day(s) have passed\n",
            "X: 90, Y: 87, Z: 65\n",
            "==================================================\n",
            "==================================================\n",
            "12 day(s) have passed\n",
            "X: 90, Y: 83, Z: 69\n",
            "==================================================\n",
            "==================================================\n",
            "13 day(s) have passed\n",
            "X: 90, Y: 76, Z: 76\n",
            "==================================================\n",
            "==================================================\n",
            "14 day(s) have passed\n",
            "X: 90, Y: 69, Z: 83\n",
            "==================================================\n",
            "==================================================\n",
            "15 day(s) have passed\n",
            "X: 90, Y: 61, Z: 91\n",
            "==================================================\n",
            "==================================================\n",
            "16 day(s) have passed\n",
            "X: 90, Y: 55, Z: 97\n",
            "==================================================\n",
            "==================================================\n",
            "17 day(s) have passed\n",
            "X: 90, Y: 47, Z: 105\n",
            "==================================================\n",
            "==================================================\n",
            "18 day(s) have passed\n",
            "X: 90, Y: 45, Z: 107\n",
            "==================================================\n",
            "==================================================\n",
            "19 day(s) have passed\n",
            "X: 90, Y: 43, Z: 109\n",
            "==================================================\n",
            "==================================================\n",
            "20 day(s) have passed\n",
            "X: 90, Y: 37, Z: 115\n",
            "==================================================\n",
            "==================================================\n",
            "21 day(s) have passed\n",
            "X: 90, Y: 33, Z: 119\n",
            "==================================================\n",
            "==================================================\n",
            "22 day(s) have passed\n",
            "X: 90, Y: 27, Z: 125\n",
            "==================================================\n",
            "==================================================\n",
            "23 day(s) have passed\n",
            "X: 90, Y: 24, Z: 128\n",
            "==================================================\n",
            "==================================================\n",
            "24 day(s) have passed\n",
            "X: 90, Y: 22, Z: 130\n",
            "==================================================\n",
            "==================================================\n",
            "25 day(s) have passed\n",
            "X: 90, Y: 16, Z: 136\n",
            "==================================================\n",
            "==================================================\n",
            "26 day(s) have passed\n",
            "X: 90, Y: 16, Z: 136\n",
            "==================================================\n",
            "==================================================\n",
            "27 day(s) have passed\n",
            "X: 90, Y: 13, Z: 139\n",
            "==================================================\n",
            "==================================================\n",
            "28 day(s) have passed\n",
            "X: 90, Y: 9, Z: 143\n",
            "==================================================\n",
            "==================================================\n",
            "29 day(s) have passed\n",
            "X: 90, Y: 8, Z: 144\n",
            "==================================================\n",
            "==================================================\n",
            "30 day(s) have passed\n",
            "X: 90, Y: 8, Z: 144\n",
            "==================================================\n",
            "==================================================\n",
            "31 day(s) have passed\n",
            "X: 89, Y: 9, Z: 144\n",
            "==================================================\n",
            "==================================================\n",
            "32 day(s) have passed\n",
            "X: 88, Y: 9, Z: 145\n",
            "==================================================\n",
            "==================================================\n",
            "33 day(s) have passed\n",
            "X: 88, Y: 8, Z: 146\n",
            "==================================================\n",
            "==================================================\n",
            "34 day(s) have passed\n",
            "X: 88, Y: 7, Z: 147\n",
            "==================================================\n",
            "==================================================\n",
            "35 day(s) have passed\n",
            "X: 87, Y: 8, Z: 147\n",
            "==================================================\n",
            "==================================================\n",
            "36 day(s) have passed\n",
            "X: 87, Y: 7, Z: 148\n",
            "==================================================\n",
            "==================================================\n",
            "37 day(s) have passed\n",
            "X: 86, Y: 8, Z: 148\n",
            "==================================================\n",
            "==================================================\n",
            "38 day(s) have passed\n",
            "X: 85, Y: 8, Z: 149\n",
            "==================================================\n",
            "==================================================\n",
            "39 day(s) have passed\n",
            "X: 85, Y: 8, Z: 149\n",
            "==================================================\n",
            "==================================================\n",
            "40 day(s) have passed\n",
            "X: 83, Y: 10, Z: 149\n",
            "==================================================\n"
          ]
        }
      ],
      "source": [
        "X, Y, Z, t = model.simulate(\n",
        "    initial_infected_population=0.08,\n",
        "    beta=1/100,\n",
        "    gamma=1/1440\n",
        ")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "K95repCaC5SW"
      },
      "source": [
        "## Results"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 38,
      "metadata": {
        "id": "Iov6xAX_IswS"
      },
      "outputs": [],
      "source": [
        "S = np.array(X) / N\n",
        "I = np.array(Y) / N\n",
        "R = np.array(Z) / N\n",
        "time = np.array(t) / (6 * 24)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 40,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 513
        },
        "id": "_QY8acTPC8At",
        "outputId": "09838c38-e47a-4455-e4aa-a41b5722fb26"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 576x576 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.figure(figsize=(8, 8))\n",
        "plt.plot(time, S, label='Susceptible')\n",
        "plt.plot(time, I, label='Infected')\n",
        "plt.plot(time, R, label='Recovered')\n",
        "plt.legend()\n",
        "plt.title('Disease Spread (SIR Model)')\n",
        "plt.xlabel('Timeline (in Days)')\n",
        "# plt.xticks(plt.xticks())\n",
        "plt.ylabel('Fraction of Population')\n",
        "plt.show()"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [],
      "name": "week_2.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.10.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}